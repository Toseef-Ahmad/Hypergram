type: edu
files:
- name: src/index.html
  visible: true
  text: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Hypergram</title>
    </head>
    <body>

    </body>
    </html>
  learner_created: false
- name: test/images/testImage.png
  visible: false
  text: iVBORw0KGgoAAAANSUhEUgAAAB4AAAAeCAYAAAA7MK6iAAAE4UlEQVRIS51WTUxcVRT+7n3zg5SfdlpIjUlpqC5qC5WVqN2LStNhY+K0NdVVuzWi4EJjTJA6LowxqSb+kBTHZSE0hkCjCRBlZwu0uBHb1BjS4EA7Uebvvavn/rz35s2bofUtZu4779zzfec75/6w9u8nxUakEwIWBATkw+jHMQMwAQhORhooF+2kbHKCdPLG9M603Z2i5zMGhtkbbigVxASS6Dq+H5CC+/1MVDIzPZ0DjIjX8JNhZ5eJWmUW8lUT8NHystWMhM6K/rlxpH8iV/+pzNjg+8GMWkYIXwmUIpRl2ATi7peefEkFRZrhqpa6xlyPt3YgOf0lcB0C9RSWvwaV6TMRrLH57mehbRKQeTWX1dDvrrvj2aQSQIJvICvaPFWk3SHglRCUAHsJYurmyeX2BncAx9RJ+SUYASZ8vWNgFFmGGZKaoZP/hi5+XTpOlge8fnNF8DWMW6tKBRPsL2TFXtA/BciKfUhFx5EppuS7yn6vqlTn1SmhABmWnWOyAdacQ15Xy+RrLQuVpQH00zgb/Rpjpdd9LULEba+5Xv1hUDxq/YkWbCHGbNmlFwvn0cWXZL0mnQG9mYQvjwTLyg8kayqawaLdi15rEdPlPmkfjo9iMJ9GKvotMuUUElCqsHfnXhbNuC8BNx1Vk5HCMDr5msx0TRxSS4a2r+CjTQRogIxLX2QaPdY1d8Zg/iNJjMApLkvP9anpcnvTDSIc+b5QelbaJm2qeQgwgFQkg2lbZxcbxT3Rgj/EYzjCV6t4/mI/pYAp6jtzp8QeKZfpSu2vwYcLIyiLmDIGXJRREUrHB12HG/ZhHLFuVkz4sDjk63KApedfDE9FxnQwWPjYMHEbw01FqkSgb4YfGprpptiNz0vn3F6QOZz88QNxPPJTaDqbzh6MFId9klVzpOaixko3vB2QVvnS7zW7R46NzBI4Pf+CuFg8h/OxLyoAFkrPYdJJVtXJfyzKTi29orKuAvbKQDWirG85HciUT6nmujD/kuCC1pfaUYhhJp9EkTfhlnMAjzj3sM1bZXAa09PqrLuECmwXkvFZtPEsdvFiNVEAb21fkLureRgcsMaZefFG/DO0sJzbKMy9EDB8db8POYv2WoZm564cJ+w7KKEBbfaveLrxDq7/3QomHBxr3kZ7rIhtmyNesMEbGbKfOuAtwPX+uMT9hyXQKLJg/RMnhRAMgnPsjth4fCaP6ICFuCWQty0sbsVQ4g1SiigKSibqeNNynIMJG082laXFYkDz7zY5A3RrKQhsHbSwmovoGeocYP2XCdiTofu7ApZScd8Vh5a0OvAlnj4/pC1kfTVwgSfGi2h6HsgdtLCSi+BwsyK1miM2qvYS2F+YrkwBywS8w3P09gmsdEzV9FJxGmp+Z/2XkwHgfOiEo7f7sdJxpSpQLXtXpjqO37cK2B85OXQWE6NjrunSOHDm9E5aAPu7f0bbUM/DZbxzWM+DANaXngmZEtxognutrvGlcYYzpwV2qhshGN8wgt78ylujP25y6DVMjH5T2Vx+h6njGzixsO+BBDDBHsjZLKpgV9fPxPv6f8D8sdnQJ18Ksyze77qL95bb6xKvXw4G1YCqxkFf9X5FXvd1V4efjGFZ1arx/u5FrC/11ldbAMlhqvEYVMYH9EYQetA/TOXqNLh7Y2YQ/91S/wXtwCFuAL7UBQAAAABJRU5ErkJggg==
  learner_created: false
- name: test/test.js
  visible: false
  text: |
    const puppeteer = require('puppeteer');
    const pixels = require('image-pixels')
    const path = require('path');
    const rimraf = require('rimraf');
    const fs = require("fs");

    const hs = require('hs-test-web');
    const {onPage} = require('hs-test-web');
    const sleep = (ms) => new Promise(res => setTimeout(res, ms));

    const workingDir = path.resolve(__dirname, '../src');
    const pagePath = 'file://' + path.resolve(__dirname, workingDir + '/index.html');
    const imageFolderPath = path.resolve(__dirname, '../test/images/');
    const initImage = imageFolderPath + '/testImage.png'
    const brightnessTestImage = imageFolderPath + '/testBrightness.png'
    const contrastTestImage = imageFolderPath + '/testContrast.png'
    const transparentTestImage = imageFolderPath + '/testTransparent.png'
    const multipleFilterTestImage = imageFolderPath + '/testMultipleFilters.png'
    const downloadedFilePath = workingDir + `${path.sep}downloads${path.sep}result.png`;

    function comparePixels(userPixels, correctPixels, errorMessage) {
        if (correctPixels.length !== Object.keys(userPixels).length) {
            return hs.wrong("Wrong number ox pixels on the canvas!")
        }

        for (let i = 0; i < correctPixels.length; i++) {
            if (correctPixels[i] !== userPixels[i]) {
                return hs.wrong(errorMessage)
            }
        }
    }


    async function stageTest() {

        const browser = await puppeteer.launch({
            headless: false,
            defaultViewport: null,
            args: ['--start-maximized', '--disable-infobar'],
            ignoreDefaultArgs: ['--enable-automation'],
            devtools: true
        });

        const page = await browser.newPage();
        await page.goto(pagePath);
        await page._client.send('Page.setDownloadBehavior', {
            behavior: 'allow',
            downloadPath: workingDir + path.sep + "downloads"
        });

        page.on('console', msg => console.log(msg.text()));

        await sleep(1000);

        rimraf.sync(workingDir + '/downloads');

        let result = await hs.test(
            onPage(page, () => {
                const canvas = document.getElementsByTagName("canvas");
                if (canvas.length !== 1) {
                    return hs.wrong("There is should be 1 canvas element in the page!")
                }
                this.getPixels = () => {
                    const canvas = document.getElementsByTagName("canvas")[0];
                    if (canvas.width !== 30 || canvas.height !== 30) {
                        return hs.wrong("After uploading an image into canvas it has wrong size!")
                    }
                    const ctx = canvas.getContext("2d");
                    return ctx.getImageData(0, 0, canvas.width, canvas.height).data;
                }
                return hs.correct()
            }),
            onPage(page, () => {
                this.brightnessSlider = document.getElementById("brightness")
                this.contrastSlider = document.getElementById("contrast")
                this.transparentSlider = document.getElementById("transparent")

                if (this.brightnessSlider === null) {
                    return hs.wrong("Can't find a brightness slider! There is should be an input tag with #brightness id.")
                }

                if (!this.brightnessSlider.hasAttribute("min") ||
                    !this.brightnessSlider.hasAttribute("max") ||
                    !this.brightnessSlider.hasAttribute("step")) {
                    return hs.wrong("Looks like your brightness slider doesn't have one of the following attributes:" +
                        " 'min', 'max' or 'step'")
                }

                if (this.contrastSlider === null) {
                    return hs.wrong("Can't find a contrast slider! There is should be an input tag with #contrast id.")
                }

                if (!this.contrastSlider.hasAttribute("min") ||
                    !this.contrastSlider.hasAttribute("max") ||
                    !this.contrastSlider.hasAttribute("step")) {
                    return hs.wrong("Looks like your brightness slider doesn't have one of the following attributes:" +
                        " 'min', 'max' or 'step'")
                }

                if (this.transparentSlider === null) {
                    return hs.wrong("Can't find a transparent slider! There is should be an input tag with #transparent id.")
                }

                if (!this.transparentSlider.hasAttribute("min") ||
                    !this.transparentSlider.hasAttribute("max") ||
                    !this.transparentSlider.hasAttribute("step")) {
                    return hs.wrong("Looks like your brightness slider doesn't have one of the following attributes:" +
                        " 'min', 'max' or 'step'")
                }

                return hs.correct()
            }),
            onPage(page, () => {

                const brightnessMinValue = parseInt(this.brightnessSlider.getAttribute("min"));
                const brightnessMaxValue = parseInt(this.brightnessSlider.getAttribute("max"));
                const brightnessStepValue = parseInt(this.brightnessSlider.getAttribute("step"));

                if (brightnessMinValue !== -255 || brightnessMaxValue !== 255 || brightnessStepValue !== 1) {
                    return hs.wrong("Brightness slider should have the following attribute values: " +
                        "min=-255, max=255, step=1")
                }

                const contrastMinValue = parseInt(this.contrastSlider.getAttribute("min"));
                const contrastMaxValue = parseInt(this.contrastSlider.getAttribute("max"));
                const contrastStepValue = parseInt(this.contrastSlider.getAttribute("step"));

                if (contrastMinValue !== -128 || contrastMaxValue !== 128 || contrastStepValue !== 1) {
                    return hs.wrong("Contrast slider should have the following attribute values: " +
                        "min=-128, max=128, step=1")
                }

                const transparentMinValue = parseInt(this.transparentSlider.getAttribute("min"));
                const transparentMaxValue = parseInt(this.transparentSlider.getAttribute("max"));
                const transparentStepValue = parseFloat(this.transparentSlider.getAttribute("step"));

                if (transparentMinValue !== 0 || transparentMaxValue !== 1 || transparentStepValue !== 0.1) {
                    return hs.wrong("Transparent slider should have the following attribute values: " +
                        "min=0, max=1, step=0.1")
                }

                const brightnessDefaultValue = parseInt(this.brightnessSlider.value)
                const contrastDefaultValue = parseInt(this.contrastSlider.value)
                const transparentDefaultValue = parseInt(this.transparentSlider.value)

                if (brightnessDefaultValue !== 0) {
                    return hs.wrong("The default value of the brightness slider should be equal to 0!")
                }

                if (contrastDefaultValue !== 0) {
                    return hs.wrong("The default value of the contrast slider should be equal to 0!")
                }

                if (transparentDefaultValue !== 1) {
                    return hs.wrong("The default value of the transparent slider should be equal to 1!")
                }

                return hs.correct()
            }),
            async () => {
                const uploadButton = await page.$("input[type='file']#file-input");
                await uploadButton.uploadFile(initImage);
                await uploadButton.evaluate(upload => upload.dispatchEvent(new Event('change', {bubbles: true})));
                await sleep(500)

                const userPixels = await page.evaluate(() => {
                    return this.getPixels()
                });

                const {data} = await pixels(initImage)

                const compareResult = comparePixels(userPixels, data,
                    "After downloading an image into canvas it has wrong pixel values!");
                if (compareResult) {
                    return compareResult
                }

                return hs.correct()
            },

            // testBrightness 87
            // testContrast 69
            // testTransparent 0.5

            async () => {
                let userPixels = await page.evaluate(() => {
                    this.brightnessSlider.value = 87;
                    this.brightnessSlider.dispatchEvent(new Event("change"))
                    return this.getPixels()
                });

                let realPixels = await pixels(brightnessTestImage)

                let compareResult = comparePixels(userPixels, realPixels.data,
                    "After increasing brightness of the image it has wrong pixel values!");
                if (compareResult) {
                    return compareResult
                }

                userPixels = await page.evaluate(() => {
                    this.brightnessSlider.value = 0;
                    this.brightnessSlider.dispatchEvent(new Event("change"))
                    return this.getPixels()
                });

                realPixels = await pixels(initImage)

                compareResult = comparePixels(userPixels, realPixels.data,
                    "After decreasing brightness of the image to the default value it has wrong pixel values!");
                if (compareResult) {
                    return compareResult
                }

                userPixels = await page.evaluate(() => {
                    this.contrastSlider.value = 69;
                    this.contrastSlider.dispatchEvent(new Event("change"))
                    return this.getPixels()
                });

                realPixels = await pixels(contrastTestImage)

                compareResult = comparePixels(userPixels, realPixels.data,
                    "After increasing contrast of the image it has wrong pixel values!");
                if (compareResult) {
                    return compareResult
                }

                userPixels = await page.evaluate(() => {
                    this.contrastSlider.value = 0;
                    this.contrastSlider.dispatchEvent(new Event("change"))
                    return this.getPixels()
                });

                realPixels = await pixels(initImage)

                compareResult = comparePixels(userPixels, realPixels.data,
                    "After decreasing contrast of the image to the default value it has wrong pixel values!");
                if (compareResult) {
                    return compareResult
                }

                userPixels = await page.evaluate(() => {
                    this.transparentSlider.value = 0.5;
                    this.transparentSlider.dispatchEvent(new Event("change"))
                    return this.getPixels()
                });

                realPixels = await pixels(transparentTestImage)

                compareResult = comparePixels(userPixels, realPixels.data,
                    "After decreasing transparent of the image it has wrong pixel values!");
                if (compareResult) {
                    return compareResult
                }

                userPixels = await page.evaluate(() => {
                    this.transparentSlider.value = 1;
                    this.transparentSlider.dispatchEvent(new Event("change"))
                    return this.getPixels()
                });

                realPixels = await pixels(initImage)

                compareResult = comparePixels(userPixels, realPixels.data,
                    "After increasing transparent of the image to the default value it has wrong pixel values!");
                if (compareResult) {
                    return compareResult
                }

                userPixels = await page.evaluate(() => {
                    this.brightnessSlider.value = 92;
                    this.brightnessSlider.dispatchEvent(new Event("change"))

                    this.contrastSlider.value = 128;
                    this.contrastSlider.dispatchEvent(new Event("change"))

                    this.transparentSlider.value = 0.8;
                    this.transparentSlider.dispatchEvent(new Event("change"))
                    return this.getPixels()
                });

                realPixels = await pixels(multipleFilterTestImage)

                compareResult = comparePixels(userPixels, realPixels.data,
                    "After applying multiple filters to the image it has wrong pixel values!");
                if (compareResult) {
                    return compareResult
                }

                return hs.correct()
            },
            onPage(page, () => {
                const saveButton = document.querySelector("button#save-button")
                if (saveButton === null) {
                    return hs.wrong("Can't find a button with #save-button id!")
                }
                saveButton.click();
                return hs.correct()
            }),
            async () => {
                await sleep(1000)

                if (!fs.existsSync(downloadedFilePath)) {
                    return hs.wrong("Looks like you didn't download a PNG file named 'testMultipleFilters.png', " +
                        "after clicking on 'Save Image' button")
                }
                return hs.correct();
            },
            async () => {
                const downloadedPixels = await pixels(downloadedFilePath)
                const correctPixels = await pixels(multipleFilterTestImage)

                const compareResult = comparePixels(downloadedPixels.data, correctPixels.data,
                    "After downloading an image from the page it has wrong pixel values!");
                if (compareResult) {
                    return compareResult
                }

                return hs.correct();
            }
        );

        rimraf.sync(workingDir + '/downloads');

        await browser.close();
        return result;
    }


    jest.setTimeout(30000);
    test("Test stage", async () => {
            let result = await stageTest();
            if (result['type'] === 'wrong') {
                fail(result['message']);
            }
        }
    );
  learner_created: false
- name: src/index.css
  visible: true
  text: |-
    main {
        width: 80vw;
        height: 60vh;
        box-shadow: .2px 0.2px 0.2px 0.2px #777;
        position: relative;
        margin-top: 5%;
        margin-left: 10%;
    }
    .canvas {
        width: 100%;
        height: 100%;
        position: absolute;
    }

    .control-panel {
        width: 30%;
        height: 100%;
        background-color: #95B8D1;
        position: absolute;
        right: 0;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        justify-items: center;
        text-align: center;
    }

    .file-input {
        width: 0.1px;
        height: 0.1px;
        opacity: 0;
        overflow: hidden;
        position: absolute;
        /*color: white;*/
        z-index: -1;
    }

    .file-input + label {
        font-size: .8rem;
        font-weight: 400;
        background-color: #EEAFB8;
        display: inline-block;
        padding: 10px 35px;
    }

    .file-input + label:hover {
        box-shadow: 0px 10px 6px -6px #777;
    }

    .save-img {
        background-color: #666A86;
        padding: 10px 30px;
        border: none;
        border-radius: 2px;

    }

    .save-img:hover {
        box-shadow: 0 10px 6px -6px #777;
    }
  learner_created: true
- name: test/images/testBrightness.png
  visible: true
  learner_created: true
- name: test/images/testContrast.png
  visible: true
  learner_created: true
- name: test/images/testTransparent.png
  visible: true
  learner_created: true
- name: test/images/testMultipleFilters.png
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/14425#comment
status: Failed
feedback:
  message: |-
    Error: Failed: "Wrong answer in test #5

    After applying multiple filters to the image it has wrong pixel values!"
  time: Fri, 24 Dec 2021 11:00:27 UTC
record: -1
